moduli = [
    0x0c, 0x0e, 0xe9, 0xeb, 0xa3, 0xae, 0xeb, 0x18,
    0xae, 0xbc, 0x6d, 0xca, 0xde, 0x06, 0x3c, 0x16,
    0xe4, 0xc0, 0xa2, 0xd1, 0x0c, 0xf9, 0xba, 0xa8,
    0x3b, 0xce, 0x62, 0xdd, 0x76, 0x0f, 0x37, 0xbc,
    0x2b, 0xb6, 0xbc, 0x1f, 0x3c, 0x50, 0xf2, 0x64,
    0x7c, 0xd2, 0xd1, 0x42, 0x05, 0x47, 0xd8, 0x87,
    0xe1, 0xe7, 0x1c, 0xb0, 0x78, 0xe0, 0xc7, 0x17,
    0xa7, 0xef, 0x27, 0xbc, 0x18, 0x70, 0x72, 0x8c,
    0x6e, 0x64, 0x36, 0x91, 0x2b, 0xf0, 0x81, 0xc8,
    0xd4, 0x5f, 0x23, 0xae, 0x36, 0xc5, 0xd9, 0xc5,
    0xfa, 0x36, 0x27, 0x19, 0x0f, 0xe3, 0xd5, 0xe7,
    0xce, 0x4e, 0x24, 0xb3, 0x3b, 0x72, 0x40, 0x68,
    0x13, 0x4f, 0x5c, 0xc7, 0xb7, 0xba, 0x3e, 0xf3,
    0x4d, 0xe5, 0xcb, 0xe8, 0x3e, 0x98, 0x07, 0xb7,
    0xdd, 0xd7, 0xf4, 0x90, 0xf0, 0xa3, 0xed, 0xa4,
    0x8c, 0x18, 0x7a, 0x5b, 0x2f, 0xa3, 0x23, 0x82,
    0x03, 0x91, 0xd1, 0x3c, 0xa9, 0x5d, 0xb1, 0x3f,
    0x23, 0x5e, 0x62, 0x54, 0xbc, 0x25, 0xf5, 0xd6,
    0x1c, 0x96, 0xf2, 0x27, 0xc8, 0xa9, 0xb5, 0x97,
    0x20, 0x54, 0x98, 0x08, 0x23, 0x04, 0xda, 0x80,
    0x4d, 0x28, 0xf7, 0x72, 0xd7, 0xd1, 0x2c, 0x2e,
    0x21, 0x9e, 0xb3, 0xf8, 0xe8, 0x77, 0x87, 0x10,
    0x38, 0xd3, 0xb2, 0x18, 0xc1, 0x29, 0x4e, 0xe3,
    0x37, 0x7e, 0x41, 0x1c, 0xfa, 0xfd, 0x50, 0x85,
    0xc7, 0xad, 0xdc, 0xff, 0x2b, 0x66, 0x99, 0xc2,
    0x4b, 0xfa, 0xb2, 0x4f, 0x49, 0xe6, 0xbe, 0x50,
    0x41, 0xc7, 0xd4, 0x8e, 0x54, 0x71, 0x7d, 0xd9,
    0x26, 0x1b, 0x58, 0xa4, 0xa9, 0x49, 0x0e, 0x9f,
    0x34, 0x89, 0x11, 0xdb, 0xe2, 0xdf, 0x3d, 0xbc,
    0xe3, 0xa3, 0xa1, 0x0e, 0xac, 0x35, 0x18, 0x55,
    0xec, 0x80, 0xca, 0xd7, 0x40, 0xa8, 0xe4, 0x3a,
    0x83, 0xf9, 0x29, 0x77, 0x20, 0x1e, 0xd8, 0x8b,
    0x7b, 0x15, 0xfe, 0x4b, 0xb4, 0x72, 0x66, 0xcb
]

residues = [
    0x02, 0x0a, 0xc4, 0x09, 0x28, 0x08, 0x09, 0x0e,
    0x08, 0x96, 0x6a, 0x9a, 0x56, 0x02, 0x0e, 0x04,
    0x7a, 0x3e, 0x7a, 0x67, 0x02, 0xa7, 0x0e, 0x26,
    0x24, 0x9e, 0x50, 0x8b, 0x24, 0x0e, 0x04, 0x96,
    0x26, 0xb2, 0x96, 0x0e, 0x0e, 0x0e, 0xca, 0x5e,
    0x0e, 0xa4, 0x67, 0x1a, 0x04, 0x01, 0x0e, 0x0e,
    0xc2, 0x3b, 0x0a, 0x9e, 0x0e, 0x5e, 0x07, 0x13,
    0x84, 0xda, 0x23, 0x96, 0x0e, 0x51, 0x08, 0x5e,
    0x04, 0x5e, 0x0e, 0x7c, 0x26, 0x0e, 0x26, 0x5e,
    0x1e, 0x54, 0x18, 0x08, 0x0e, 0x27, 0x2d, 0x27,
    0x5e, 0x0e, 0x23, 0x13, 0x0e, 0xb6, 0x8f, 0x3b,
    0x9e, 0x4a, 0x0e, 0x93, 0x24, 0x08, 0x3e, 0x16,
    0x08, 0x3a, 0x2a, 0x07, 0x23, 0x0e, 0x0e, 0x7a,
    0x3b, 0x74, 0x42, 0xb6, 0x0e, 0x2e, 0x03, 0x23,
    0x8b, 0x7c, 0xda, 0x0e, 0x0e, 0x28, 0x89, 0x62,
    0x5e, 0x0e, 0x60, 0x57, 0x09, 0x28, 0x18, 0x4a,
    0x02, 0x7c, 0x67, 0x0e, 0x3d, 0x0e, 0x5f, 0x3b,
    0x18, 0x38, 0x50, 0x26, 0x96, 0x0c, 0x81, 0xbe,
    0x0a, 0x2c, 0xca, 0x23, 0x5e, 0x3d, 0x64, 0x60,
    0x1e, 0x26, 0x2e, 0x06, 0x18, 0x02, 0x6a, 0x3e,
    0x3b, 0x0e, 0xd9, 0x08, 0x7c, 0x67, 0x1a, 0x2a,
    0x1a, 0x3a, 0x93, 0x0e, 0xb6, 0x03, 0x0e, 0x0e,
    0x26, 0x90, 0xb0, 0x0e, 0xb1, 0x10, 0x4a, 0xb6,
    0x04, 0x7a, 0x09, 0x0a, 0x5e, 0xb4, 0x0e, 0x7a,
    0x07, 0x15, 0x72, 0xe0, 0x26, 0x14, 0x7a, 0x2c,
    0x2c, 0x5e, 0xb0, 0x3a, 0x39, 0x86, 0x54, 0x0e,
    0x09, 0x07, 0x1e, 0x48, 0x26, 0x28, 0x5e, 0x2d,
    0x08, 0x0e, 0x46, 0x62, 0x3d, 0x39, 0x0a, 0x53,
    0x16, 0x0b, 0x03, 0xcb, 0x28, 0xd2, 0x23, 0x96,
    0xb6, 0x28, 0x9d, 0x0a, 0x26, 0x1e, 0x0e, 0x36,
    0x9a, 0x3e, 0x9a, 0x7c, 0x3e, 0x26, 0x7a, 0x08,
    0x82, 0xa7, 0x10, 0x03, 0x1e, 0x0e, 0x0e, 0x05,
    0x62, 0x11, 0x0e, 0x2c, 0x0e, 0x08, 0x14, 0x42
]

for i in range(len(moduli)):
    print(i)
    try:
        crt(residues[:i], moduli[:i])
    except ValueError:
        breaking_ind = i-1
        break

#print(breaking_ind)

gud = [a for a in moduli if sum([gcd(a,w)==1 for w in moduli]) == len(moduli)-1][:8]
if len(gud) < 8:
    raise ValueError('out of luck, not enough coprimes')

a, b = [], []
for i, (m, r) in enumerate(zip(moduli, residues)):
    if i == breaking_ind:
        continue
    if m in gud:
        a.append(r)
    else:
        a.append(r+1)
    b.append(m)
password = crt(a, b)
print(password)
